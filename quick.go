package main

import f "fmt"
import t "time";

func partition(list []int, left int, right int) int {
	pivotIndex := left + (right - left) / 2
	pivotValue := list[pivotIndex]

	i := left
	j := right

	for i <= j {
		for list[i] < pivotValue {
			i++
		}

		for list[j] > pivotValue {
			j--
		}

		if i <= j {
			temp := list[i]
			list[i] = list[j]
			list[j] = temp
			i++;
			j--;
		}
	}

	return i
}

func quicksort(list []int, left int, right int) {
	if left < right {
		pivotIndex := partition(list, left, right)
		quicksort(list, left, pivotIndex - 1)
		quicksort(list, pivotIndex, right)
	}
}

func main() {
	normalDistribution := []int{
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
		-2, -3, -1, 3, 0, 1, 0, 1, 1, 0, 0, 2, -1,
	}

	shiftedDistribution := []int{
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
		2, 1, -1, -3, -1, -3, -1, -3, -3, -2, -2, -3, -2,
	}

	betaDistribution := []int{
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
		-3, -3, -2, -3, 2, 0, 1, -1, -2, 3, 3, 2, 3,
	}

	start := t.Now()
	quicksort(normalDistribution, 0, len(normalDistribution) - 1)
	f.Println(t.Since(start))


	start = t.Now()
	quicksort(shiftedDistribution, 0, len(shiftedDistribution) - 1)
	f.Println(t.Since(start))

	start = t.Now()
	quicksort(betaDistribution, 0, len(betaDistribution) - 1)
	f.Println(t.Since(start))
}